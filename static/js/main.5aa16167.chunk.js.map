{"version":3,"sources":["App.js","serviceWorker.js","index.js","loading.gif"],"names":["axios","require","Toast","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fadeOut","bind","assertThisInitialized","state","hidden","message","interval","setTimeout","time","clearTimeout","setState","toastDuration","react_default","a","createElement","className","tabIndex","React","Component","Loginform","_this2","passwordInput","nameInput","newAccount","handleProceedButton","handleNameChange","handlePasswordChange","handleNewAccountChange","handleEnterkey","e","keyCode","target","value","checked","onSubmit","preventDefault","placeholder","maxLength","onChange","type","onKeyUp","onClick","id","htmlFor","Chatbox","_this3","scrollToBottom","messagesEnd","scrollIntoView","behavior","block","inline","newMessage","chat","name","scrollTop","refreshInterval","handleMessageBoxChange","handleMessageBoxKeyPress","fetchNewMessages","handleSmiley","setInterval","clearInterval","fetchNewMessagesForActiveChat","messages","chatId","length","date","submitMessage","_this4","chatbubbles","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","bubbleClassName","from","push","key","_id","err","return","style","float","clear","ref","el","title","Results","status","focus","resultElement","SearchResults","_this5","query","visible","result","doSearch","handleInputChange","handleSubmit","handleFocus","handleBlur","people","_this6","handleToast","post","concat","globalSettings","serverRoot","withCredentials","then","response","handleSearchResult","catch","error","console","onFocus","onBlur","Chat","_this7","activate","onActivate","active","ChatApp","_this8","chatInterval","notDownloaded","toast","toastTime","Date","now","activeChatIndex","email","accessKey","loggedIn","chats","fecthNewMessagesForParticularChat","handleNewChat","refreshChatLists","createInitialChatRefreshInterval","log","_this9","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","element","data","empty","password","_this10","loginFormMessage","src","loading","alt","seti","get","newState","alert","toString","index","find","item","i","_this11","newChats","to","_this12","Math","random","unshift","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","App_Chat","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","App_Toast","App_SearchResults","App_Chatbox","App_Loginform","App","App_ChatApp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5aa16167.chunk.js","sourcesContent":["import React from 'react';\nimport './roboto.css'\nimport './bootstrap-grid.css';\nimport './App.css';\nimport loading from './loading.gif'\nconst axios = require('axios');\n\n\nclass Toast extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.fadeOut = this.fadeOut.bind(this);\n    this.state = {\n      hidden: true,\n      message: \"\",\n      interval: setTimeout(this.fadeOut, 0),\n      time: this.props.time,\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.interval);\n    this.setState({\n      interval: null\n    })\n  }\n\n  componentDidUpdate() {\n    if (this.props.time !== this.state.time) {\n\n      if (this.props.message) {\n        this.setState({\n          hidden: false,\n          message: this.props.message,\n          interval: setTimeout(this.fadeOut, this.props.toastDuration),\n          time: this.props.time,\n\n        })\n      }\n\n    }\n  }\n\n  // static getDerivedStateFromProps(props, state) {\n  //   if (props.message !== state.message) {\n  //     state.hidden = false;\n  //     state.message = props.message;\n  //     state.interval = setInterval(this.fadeOut, 5000);\n  //   }\n  //   return state\n  // }\n\n  fadeOut() {\n    this.setState({\n      hidden: true\n    })\n  }\n\n  render() {\n    return (\n      <div className={(this.state.hidden) ? \"toast hidden\" : \"toast visible\"} tabIndex=\"100\">\n        {this.state.message}\n      </div >\n    )\n  }\n}\n\n\nclass Loginform extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n      passwordInput: \"\",\n      nameInput: \"\",\n      newAccount: false\n    }\n    this.handleProceedButton = this.handleProceedButton.bind(this)\n    this.handleNameChange = this.handleNameChange.bind(this)\n    this.handlePasswordChange = this.handlePasswordChange.bind(this)\n    this.handleNewAccountChange = this.handleNewAccountChange.bind(this)\n    this.handleEnterkey = this.handleEnterkey.bind(this)\n\n\n  }\n\n  handleEnterkey(e) {\n    if (e.keyCode === 13) {\n      this.handleProceedButton()\n    }\n  }\n  handleProceedButton() {\n    this.props.handleProceedButton(this.state.nameInput, this.state.passwordInput, this.state.newAccount);\n    // @todo fix above\n  }\n\n  handleNameChange(e) {\n    this.setState({\n      nameInput: e.target.value\n    })\n\n  }\n  handlePasswordChange(e) {\n    this.setState({\n      passwordInput: e.target.value\n    })\n  }\n\n  handleNewAccountChange(e) {\n    this.setState({\n      newAccount: e.target.checked\n    })\n  }\n\n\n\n  render() {\n    return (\n\n      <div className=\"chat-app container login\">\n        <form onSubmit={(e) => { e.preventDefault() }}>\n          <h1 className=\"login-text\">Welcome to Chat</h1>\n          <p className=\"login-subtext\">Login or Create an Account to start chatting.<br /> Enter your username and password or create new ones, and an account will be created for you.</p>\n          <input className=\"login-field theme-input\" placeholder=\"Full Name\" maxLength=\"64\" value={this.state.nameInput} onChange={this.handleNameChange} />\n          <input className=\"login-field theme-input\" type=\"password\" onKeyUp={this.handleEnterkey} placeholder=\"Password\" maxLength=\"128\" value={this.state.passwordInput} onChange={this.handlePasswordChange} />\n          <br />\n          <button className=\"theme-btn login-field\" onClick={this.handleProceedButton}>Proceed</button>\n          <br />\n          <input type=\"checkbox\" className=\"checkbox\" id=\"new-account\" checked={this.state.newAccount} onChange={this.handleNewAccountChange} />\n          <label htmlFor=\"new-account\">&nbsp;Create a new account</label>\n          <br />\n          <p className=\"message\">{this.props.message}</p>\n          <small>&copy; 2019 Diyanshu Agrawal. All rights reserved.</small>\n        </form>\n      </div >\n\n    )\n  }\n}\n\nclass Chatbox extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      newMessage: \"\",\n      chat: props.chat,\n      name: props.name,\n      scrollTop: null,\n      refreshInterval: null,\n    };\n\n    this.handleMessageBoxChange = this.handleMessageBoxChange.bind(this)\n    this.handleMessageBoxKeyPress = this.handleMessageBoxKeyPress.bind(this)\n    this.fetchNewMessages = this.fetchNewMessages.bind(this)\n    this.handleSmiley = this.handleSmiley.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      refreshInterval: setInterval(this.fetchNewMessages, 3000)\n    })\n    this.scrollToBottom();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.refreshInterval)\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.chat && props.name) {\n      if (props.chat !== state.chat || props.name !== state.name) {\n        state.name = props.name;\n        state.chat = props.chat;\n\n      }\n    }\n    return state\n  }\n\n  fetchNewMessages() {\n    if (this.state.chat) {\n      this.props.fetchNewMessagesForActiveChat(this.state.name, this.state.chat.messages[0].chatId, this.state.chat.messages[this.state.chat.messages.length - 1].date);\n    }\n\n  }\n\n  handleMessageBoxChange(e) {\n    this.setState({\n      newMessage: e.target.value\n    })\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\", block: 'nearest', inline: 'start' });\n  }\n\n  // SubmitMessage\n  handleMessageBoxKeyPress(e) {\n    if (e.keyCode === 13) {\n      const value = this.state.newMessage;\n      const chatId = this.state.chat.messages[0].chatId;\n      this.props.submitMessage(this.state.name, value, chatId);\n      const chat = this.state.chat;\n      // chat.messages.push({\n      //   from: <span><img src={loadingBlack} style={{ width: \"10px\", height: \"10px\", verticalAlign: \"middle\" }} /> Sending</span>,\n      //   message: value,\n      //   date: chat.messages[chat.messages.length - 1].date,\n      //   _id: chat.messages[chat.messages.length - 1].date + Math.random(),\n      // })\n      this.setState({\n        newMessage: \"\",\n        chat: chat,\n      })\n    }\n  }\n\n  handleSmiley() {\n    var newMessage = this.state.newMessage;\n    newMessage += \" 🙂 \";\n    this.setState({\n      newMessage: newMessage\n    })\n  }\n\n\n  render() {\n    const chatbubbles = [];\n    if (!this.state.chat) {\n      return (<div className=\"chatbox \" >\n        <div className=\"bubble-container\">\n          <p className=\"text-center white-text\">Choose a conversation to show messages.</p>\n          <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { this.messagesEnd = el; }}>\n          </div>\n        </div>\n      </div >)\n    } else {\n      for (const message of this.state.chat.messages) {\n        const bubbleClassName = \"chat-bubble \" + (message.from === this.state.name ? \"received\" : \"sent\");\n        chatbubbles.push(\n          <div className={bubbleClassName} key={message._id}>\n            <div className=\"chat-bubble-info\">\n              {message.from}\n            </div>\n            <div className=\"chat-bubble-message\">\n              {message.message}\n            </div>\n\n\n          </div>\n        )\n      }\n      return (\n        <div className=\"chatbox \">\n          <div className=\"bubble-container\">\n            {chatbubbles}\n            <div style={{ float: \"left\", clear: \"both\" }}\n              ref={(el) => { this.messagesEnd = el; }}>\n            </div>\n\n          </div>\n          <div className=\"chat-text-box-container\">\n            <input className=\"chat-text-box\" placeholder=\"Enter your message here\" value={this.state.newMessage} onChange={this.handleMessageBoxChange} onKeyUp={this.handleMessageBoxKeyPress} maxLength={256} />\n            <button className=\"smiley-button option-button\" title=\"Send smiling face\" onClick={this.handleSmiley}>🙂</button>\n            <div className=\"clearfix\"></div>\n          </div>\n        </div>\n\n      )\n    }\n\n\n  }\n}\n\n\nfunction Results(props) {\n  if (props.status.focus) {\n    return (\n      <div>\n        <div className=\"search-result visible\">\n          <div className=\"search-results-list\">\n            {props.status.resultElement}\n          </div>\n        </div>\n      </div >\n\n    )\n  } else {\n    return (\n      <div></div>\n    )\n  }\n\n}\n\n\nclass SearchResults extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      query: \"\",\n      visible: false,\n      result: \"\",\n      id: \"search-input\",\n      resultElement: <span>Press enter to search, and only an exact match will appear for privacy.</span>\n    };\n\n\n    this.doSearch = this.doSearch.bind(this)\n    this.handleInputChange = this.handleInputChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleFocus = this.handleFocus.bind(this)\n    this.handleBlur = this.handleBlur.bind(this)\n\n\n\n  }\n\n  handleBlur() {\n    this.setState({\n      focus: false,\n      query: \"\"\n    })\n  }\n\n  handleFocus() {\n    this.setState({\n      focus: true,\n    })\n\n\n  }\n\n  doSearch(query) {\n    const people = this.props.people;\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      query: e.target.value\n    })\n  }\n\n  handleSubmit(e) { // For new chat search\n\n    if (e.keyCode === 13) {\n      this.props.handleToast(\"Searching\", 2000);\n      const query = this.state.query;\n      axios.post(`${this.props.globalSettings.serverRoot}my-chats/search`, {\n        query: query,\n        people: this.props.people,\n        withCredentials: true\n      }, {\n          withCredentials: true\n        }).then((response) => {\n          this.props.handleSearchResult(response)\n        }).catch((error) => {\n          console.error(\"Searching\", error)\n        })\n      this.setState({\n        query: \"\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input className=\"theme-btn chat-search\" placeholder=\"Search for people\" onChange={this.handleInputChange} onKeyUp={this.handleSubmit} value={this.state.query} onFocus={this.handleFocus} onBlur={this.handleBlur} />\n        <Results status={this.state} maxLength={64} />\n      </div>\n    )\n  }\n}\n\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activate = this.activate.bind(this);\n  }\n\n  activate() {\n    // this.props.onActivate();\n    this.props.onActivate(this.props.name)\n  }\n  render() {\n    return (\n      <li className={(this.props.active) ? \"active\" : \"\"} onClick={this.activate}>{this.props.name}</li>\n    )\n  }\n}\n\nclass ChatApp extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n    this.activate = this.activate.bind(this);\n    this.state = {\n      chatInterval: null,\n      notDownloaded: true,\n      toast: null,\n      toastTime: Date.now(),\n      toastDuration: 5000,\n      active: null,\n      activeChatIndex: -1,\n      globalSettings: {\n        name: null,\n        id: null,\n        email: null,\n        accessKey: null,\n        loggedIn: null,\n        serverRoot: \"https://chat-app-hereisdx.herokuapp.com/\",\n      },\n      chats: [\n\n      ]\n\n    }\n\n    this.handleProceedButton = this.handleProceedButton.bind(this);\n    this.fecthNewMessagesForParticularChat = this.fecthNewMessagesForParticularChat.bind(this);\n    this.submitMessage = this.submitMessage.bind(this)\n    this.handleNewChat = this.handleNewChat.bind(this)\n    this.refreshChatLists = this.refreshChatLists.bind(this)\n    this.createInitialChatRefreshInterval = this.createInitialChatRefreshInterval.bind(this);\n    this.handleToast = this.handleToast.bind(this)\n  }\n\n\n  createInitialChatRefreshInterval() {\n    this.setState({\n      chatInterval: setInterval(this.refreshChatLists, 6000)\n    })\n    console.log(\"Chat Lists Refreshed\");\n  }\n\n  refreshChatLists() {\n    if (this.state.globalSettings.name) {\n      const people = [];\n      if (this.state.chats) {\n        for (const element of this.state.chats) {\n          people.push(element.name);\n        }\n      }\n\n      axios.post(`${this.state.globalSettings.serverRoot}my-chats/refresh-chats`, {\n        people: people,\n        withCredentials: true\n      }, {\n          withCredentials: true\n        }).then((response) => {\n          const data = response.data;\n          if (data.error) {\n            console.error(\"Refresh chats error ->\", data.error);\n            this.setState({\n              toast: \"Error while refreshing chat lists\",\n              toastTime: Date.now(),\n              toastDuration: 5000\n            })\n          } else {\n            if (!data.empty && data) {\n              var chats = this.state.chats;\n              chats = chats.concat(data);\n              this.setState({\n                chats: chats,\n                toast: \"New conversation loaded\",\n                toastTime: Date.now(),\n                toastDuration: 5000,\n              })\n            }\n          }\n        })\n    }\n  }\n\n  /*\n  Handleproceedbutton handles login and initial download of saved chats, also handles new accounts\n  */\n  handleProceedButton(name, password, newAccount) { // For login\n\n    this.setState({\n      loginFormMessage: (\n        <span>\n          <img src={loading} className=\"loading\" alt=\"...\" />\n          <span>Please wait, attempting to log you in...  </span>\n        </span>\n      )\n    })\n    axios.post(this.state.globalSettings.serverRoot + \"login\", {\n      name: name,\n      password: password,\n      newAccount: newAccount,\n      withCredentials: true,\n    }, {\n        withCredentials: true\n      }).then(\n        (response) => {\n          if (response.data.error) {\n            this.setState({\n              loginFormMessage: response.data.error\n            })\n            console.error(\"Login attempt response error : \", response.data);\n            return;\n          }\n          const seti = this.state.globalSettings;\n          seti.name = response.data.name;\n          seti.loggedIn = true;\n          this.setState({\n            globalSettings: seti,\n            newAccount: response.data.newAccount\n          })\n\n          axios.get(`${this.state.globalSettings.serverRoot}my-chats`, {\n            withCredentials: true\n          }, {\n              withCredentials: true\n            }).then((response) => {\n              if (response.data.error) {\n                this.setState({\n                  toast: \"An error occurred while trying to load your chats\\n, please try again.\",\n                  toastTime: Date.now(),\n                  toastDuration: 5000,\n                })\n                console.error(\"Login\", response.data.error)\n                return;\n              } else {\n                const newState = this.state;\n                newState.chats = response.data;\n                newState.notDownloaded = false;\n                this.setState(newState);\n                setTimeout(this.createInitialChatRefreshInterval, 6000);\n              }\n\n            }).catch(function (error) {\n              alert(\"An error occured while fetching your chats, please reload the app\");\n              console.error(\"Fetching chats\", error);\n            })\n\n        }\n      ).catch((error) => {\n        console.error(\"OOPS\", error)\n        this.setState({\n          toast: error.toString(),\n          toastTime: Date.now(),\n          toastDuration: 5000,\n        })\n\n      })\n  }\n\n\n\n  activate(name) {\n    this.setState({\n      active: name\n    })\n    var index = -1;\n    this.state.chats.find(function (item, i) {\n      if (item.name === name) {\n        index = i;\n        return i;\n      }\n    })\n    this.setState({\n      activeChatIndex: index\n    })\n\n  }\n  fecthNewMessagesForParticularChat(name, chatId, date) {\n    axios.post(`${this.state.globalSettings.serverRoot}my-chats/new-messages`, {\n      withCredentials: true,\n      date: date,\n      chatId: chatId\n    }, {\n        withCredentials: true\n      }).then((response) => {\n        if (response.data.length > 0) {\n          const newChats = this.state.chats;\n          newChats[this.state.activeChatIndex].messages = newChats[this.state.activeChatIndex].messages.concat(response.data);\n          this.setState({\n            chats: newChats\n          })\n        }\n\n      }).catch((error) => {\n        this.setState({\n          toast: \"Error while fetching new chats.\",\n          toastTime: Date.now(),\n          toastDuration: 5000,\n        })\n        console.error(\"Fetch new messages error - >\", error);\n      })\n  }\n\n  submitMessage(to, value, chatId) { // Submit a chat message  withing a conversation\n    //from parameter sent is uselss.\n    this.setState({\n      toast: \"Posting message\",\n      toastTime: Date.now(),\n      toastDuration: 1000,\n    });\n    axios.post(`${this.state.globalSettings.serverRoot}my-chats/submit-message`, {\n      from: this.state.globalSettings.name,\n      message: value,\n      chatId: chatId,\n      withCredentials: true\n    },\n      {\n        withCredentials: true\n      }\n    ).then((response) => {\n      // ? \n    }).catch((error) => {\n      console.error(\"Error POST new message\", error)\n      this.setState({\n        toast: `Error posting message ${error}`,\n        toastTime: Math.random(),\n        toastDuration: 5000,\n      })\n\n    })\n  }\n\n\n  handleToast(toast, toastDuration) {\n    this.setState({\n      toast: toast,\n      toastTime: Date.now(),\n      toastDuration: toastDuration\n    })\n  }\n\n\n  handleNewChat(data) {\n    if (data.data.error) {\n      console.error(\"New Chat Received error\", data.data.error);\n      this.setState({\n        toast: \"Failed to create a new conversation\",\n        toastTime: Math.random(),\n        toastDuration: 5000,\n      })\n    } else {\n\n      if (!data.data.empty) {\n        const chats = this.state.chats;\n        chats.unshift(data.data);\n        this.setState({\n          chats: chats\n        })\n      } else {\n        this.setState({\n          toast: \"No matching account for your query\",\n          toastTime: Math.random(),\n          toastDuration: 5000,\n        })\n      }\n\n    }\n  }\n\n  render() {\n    if (!this.state.globalSettings.loggedIn) {\n      return (\n        <div>\n          <Toast message={this.state.toast} time={this.state.toastTime} toastDuration={this.state.toastDuration} ></Toast>\n          <div className=\"mobile\">\n            <h1>🙁 📱 🚫</h1>\n            <p>We are sorry, but we currently dont support mobile devices Please use a desktop.</p>\n          </div>\n          <Loginform globalSettings={this.state.globalSettings} handleProceedButton={this.handleProceedButton} message={this.state.loginFormMessage}></Loginform>\n        </div>\n      )\n    } else {\n      var chats = [];\n      for (var element of this.state.chats) {\n        chats.push(\n          <Chat name={element.name} onActivate={this.activate} globalSettings={this.state.globalSettings} active={(element.name === this.state.active)} key={element.name} />\n        )\n      }\n      if (this.state.notDownloaded) {\n        chats = <p className=\"no-chats text-center padding-10 color-white\">\n          <img className=\"loading\" src={loading} alt=\"...\" />\n          Downloading conversations...</p>\n      } else if (chats.length === 0) {\n        chats = <p className=\"no-chats text-center padding-10 color-white\">\n          To begin, search the exact name of a person and start chatting!\n                </p>\n      }\n\n      // List of already chatted people for SearchResults\n      const people = [];\n      for (element of this.state.chats) {\n        people.push(element.name);\n      }\n\n\n      return (\n        <div>\n          <div className=\"chat-app container\">\n            <Toast message={this.state.toast} time={this.state.toastTime} toastDuration={this.state.toastDuration} ></Toast>\n            <div className=\"row app-row\">\n              <div className=\"col-4 chats\">\n                <div className=\"chats-inner\">\n                  <SearchResults globalSettings={this.state.globalSettings} people={people} handleSearchResult={this.handleNewChat} handleToast={this.handleToast} />\n                  <ul>\n                    {chats}\n                  </ul>\n                </div>\n\n\n              </div>\n              <div className=\"col-8\">\n                <Chatbox name={this.state.active} globalSettings={this.state.globalSettings} chat={this.state.chats[this.state.activeChatIndex]} fetchNewMessagesForActiveChat={this.fecthNewMessagesForParticularChat} submitMessage={this.submitMessage}></Chatbox>\n              </div>\n            </div>\n\n\n          </div>\n        </div>)\n    }\n  }\n}\n\nfunction App() {\n  return (\n    <ChatApp />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/loading.e6ebdebf.gif\";"],"sourceRoot":""}